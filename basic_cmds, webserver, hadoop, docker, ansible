import subprocess as sp
import os
response = 'Y'
while response == 'Y':
    print("\t\t-----------------------WELCOME USER------------------------")
    print("\t\twhat would you like to do?")
    print("\t\tPress 1 :- To run basic linux commands")
    print("\t\tPress 2 :- To configure webserver")
    print("\t\tPress 3 :- To configure hadoop cluster")
    print("\t\tPress 4 :- To configure ansible")
    print("\t\tPress 5 :- To configure docker")
    inp = int(input("\tENTER YOUR CHOICE:"))
    if inp == 1:
        enter = 'Y'
        print("\tWhich basic cmd (ls, cal, date, whoami, etc.)would you like to run user?")
        while enter == 'Y':
            inp_2 = input("\tenter the command: ")
            op = sp.getoutput(inp_2)
            print(op)
            enter = input("Would you like to run basic cmd?[Y/N]")
        os.system("clear")
    elif inp==2:
        print("\tSTEP 1 IN PROGRESS: INSTALLING HTTPD")
        op1 = sp.getoutput("yum install httpd -y")
        print(op1)
        webpage = input("\tTYPE THE WEBPAGE NAME: ")
        print("\tSTEP 2 IN PROGRESS: CREATEING WEBPAGES")
        content = input("\tENTER THE CONTENT")
        saveFile = open(webpage, 'w')
        saveFile.write(content)
        saveFile.close()
        op2 = sp.getoutput("mv {} /var/www/html/".format(webpage))
        print("\tSTEP 3 IN PROGRES: STARTING SERVICES")
        op3 = sp.getoutput("systemctl start httpd")
        #i4 = sp.getoutput("firefox")
        os.system("clear")
    elif inp == 3:

        print("\tFOLLOWING IP'S ARE AVAILABLE FOR CREATION OF HDFS CLUSTER")
        print("\t--192.168.43.30      --192.168.43.113  --192.168.43.155")
        master = input("\tSELECT ONE IP FOR CONFIGURATION OF MASTER: ")
        print("\tINSTALLING JAVA")
        op1 = sp.getoutput("ssh root@{} rpm -i  jdk-8u171-linux-x64.rpm".format(master))
        print(op1)
        print("\tJAVA INSTALLED")
        os.system("sleep 3")
        print("\tINSTALLING HADOOP")
        op2 = sp.getoutput("ssh root@{} rpm -i hadoop-1.2.1-1.x86_64.rpm --force".format(master))
        print(op2)
        print("\tHADOOP INSTALLED")
        os.system("sleep 5")
        os.system("clear")
        print("\tCHECKING ISNTALLATION")
        os.system("sleep 3")
        op3 = sp.getoutput("ssh root@{} hadoop version".format(master))
        print(op3)
        os.system("sleep 3")
        op4 = sp.getoutput("ssh root@{} java -version".format(master))
        print(op4)
        print("\tDISABLING FIREWALL")
        os.system("sleep 3")
        op5 = sp.getoutput("ssh root@{} systemctl stop firewalld".format(master))
        print("\tCOPYING HDFS-SITE.XML FILE TO MASTER")
        print(op5)
        os.system("sleep 2")
        op6 = sp.getoutput("scp hdfs-site-master.xml root@{}:/etc/hadoop/".format(master))
        os.system("sleep 3")
        op7 = sp.getoutput("ssh root@{} mv /etc/hadoop/hdfs-site-master.xml /etc/hadoop/hdfs-site.xml -f".format(master))
        print(op7)

        print("\tCREATING /nn FOLDER  IN NAMENODE/MASTER")
        os.system("sleep 2")
        op8 = sp.getoutput("ssh root@{} mkdir /nn".format(master))
        print(op8)
        with open('core-site-master.xml', 'r') as f:
            s = f.read().replace('<value>','<value>hdfs://{}:9001</value>'.format(master))
        with open('core-site-master.xml', 'w') as f:
            f.write(s)
        print("\tCHANGING VALUE ATTRUBUTE OF  IP IN MASTER'S CORE-SITE.XML")
        os.system("sleep 2")
        op9 = sp.getoutput("scp core-site-master.xml root@{}:/etc/hadoop/core-site.xml".format(master))
        print(op9)
        print("\tHDFS-SITE.XML AND CORE-SITE.XML HAS BEEN CONFIGURED.....")
        print("\tFORMATTING /nn FOLDER OF NAMENODE")
        os.system("sleep 2")
        op10 = sp.getoutput("ssh root@{} hadoop namenode -format -force -nonInteractive".format(master))
        print(op10)
        os.system("sleep 5")
        os.system("clear")
        print("\tSTARTING NAMENODE")
        os.system("sleep 1")
        op11 = sp.getoutput("ssh root@{} hadoop-daemon.sh start namenode".format(master))
        print(op11)
        print("\tNAMENODE STARTED CHECK BY TYPING IP IN BROWSER : {}".format(master))
        os.system("sleep 15")

        print("\tCONFIGURATION OF DATANODE: ")
        print("\tSELECT ANY OF THE IP'S BELOW FOR CONFIGURATION OF DATANODE EXCEPT MASTER:  {} ".format(master))

        print("\t--192.168.43.30   --192.168.43.155  --192.168.43.113")
        data = input("ENTER THE IP: ")
        print("\tINSTALLING JAVA")
        data1 = sp.getoutput("ssh root@{} rpm -i  jdk-8u171-linux-x64.rpm".format(data))
        print(data1)
        print("\tJAVA INSTALLED")
        os.system("sleep 3")

        print("\tINSTALLING HADOOP")
        data2 = sp.getoutput("ssh root@{} rpm -i hadoop-1.2.1-1.x86_64.rpm --force".format(data))
        print(data2)
        print("\tHADOOP INSTALLED")
        os.system("sleep 5")
        os.system("clear")
        print("\tCHECKING INSTALLATION")
        os.system("sleep 3")
        data3 = sp.getoutput("ssh root@{} hadoop version".format(data))
        print(data3)
        os.system("sleep 3")
        data4 = sp.getoutput("ssh root@{} java -version".format(data))
        print(data4)
        print("\tDISABLING FIREWALL")
        os.system("sleep 3")
        data5 = sp.getoutput("ssh root@{} systemctl stop firewalld".format(data))
        print("\tCOPYING MASTER HDFS-SITE.XML")
        os.system("sleep 2")
        data6 = sp.getoutput("scp hdfs-site.xml root@{}:/etc/hadoop/".format(data))
        print(data6)
        os.system("sleep 10")

        os.system("clear")
        print("\tCREATING /dn1 IN DATANODE")
        os.system("sleep 2")
        data8 = sp.getoutput("ssh root@{} mkdir /dn1".format(data))
        print(data8)
        with open('core-site.xml', 'r') as f:
            s = f.read().replace('<value>','<value>hdfs://{}:9001</value>'.format(master))
        with open('core-site.xml', 'w') as f:
            f.write(s)
        print("\tCHANGING IP IN CORE-SITE.XML")
        os.system("sleep 2")
        data9 = sp.getoutput("scp core-site.xml root@{}:/etc/hadoop/core-site.xml".format(data))
        print(data9)
        print("\tHDFS-SITE.XML AND CORE-SITE.XML HAS BEEN CONFIGURED.....")

        print("\tSTARTING DATANODE")
        os.system("sleep 1")
        data11 = sp.getoutput("ssh root@{} hadoop-daemon.sh start datanode".format(data))
        print(data11)
        print("\tNAMENODE STARTED CHECK BY TYPING IP IN BROWSER : {}".format(master))
        os.system("sleep 15")
        os.system("clear")
        print("\tCONFIGURATION OF CLIENT")
        print("\tCHOOSE ONE OF FOLLOWING IP'S EXCEPT THESE : {}  {}".format(master,data))
        print("\t--192.168.43.155 --192.168.43.113   --192.168.43.30")
        client = input("ENTER IP: ")
        print("\tINSTALLING JAVA")
        client1 = sp.getoutput("ssh root@{} rpm -i  jdk-8u171-linux-x64.rpm".format(client))
        print(client1)
        print("\tJAVA INSTALLED")
        os.system("sleep 3")
        print("\tINSTALLING HADOOP")
        client2 = sp.getoutput("ssh root@{} rpm -i hadoop-1.2.1-1.x86_64.rpm --force".format(client))
        print(client2)
        print("\tHADOOP INSTALLED")
        os.system("sleep 5")
        os.system("clear")
        print("\tCHECKING ISNTALLATION")
        os.system("sleep 3")
        client3 = sp.getoutput("ssh root@{} hadoop version".format(client))
        print(client3)
        os.system("sleep 3")
        client4 = sp.getoutput("ssh root@{} java -version".format(client))
        print(client4)
        print("\tDISABLING FIREWALL")
        os.system("sleep 3")
        client5 = sp.getoutput("ssh root@{} systemctl stop firewalld".format(client))
        with open('core-site-client.xml', 'r') as f:
            s = f.read().replace('<value>','<value>hdfs://{}:9001</value>'.format(master))
        with open('core-site-client.xml', 'w') as f:
            f.write(s)
        print("\tCHANGING IP IN CORE-SITE.XML")
        os.system("sleep 2")
        client9 = sp.getoutput("scp core-site-client.xml root@{}:/etc/hadoop/core-site.xml".format(client))
        print(client9)
        print("\tCORE-SITE.XML HAS BEEN CONFIGURED.....")
        print("\tCLIENT IS CONFIGURED")
        listing = os.system("ls")
        put = input("ENTER ANY OF THE ELEMENTS TO BE PUT IN CLUSTER :")
        put_client = sp.getoutput("ssh root@{} hadoop fs -put {} /".format(client,put))
        listing_all = os.system("hadoop fs -ls /")
        print(listing_all)


    elif inp == 4:
        print("\tFor ansible automation select the ip first from following")
        print("\t--192.168.43.113   --192.168.43.155 --192.168.43.30")
        ansible = input("\tENTER THE IP: ")
        print("/t/tWhat would you like to do with ansible choose from below options:")
        res = 'Y'
        while res == 'Y':
            print("\t\tPress 1: To configure webserver")
            print("\t\tPress 2: To configure docker")
            print("\t\tPress 3: To run basic commands")

            inputt = input("\tENTER CHOICE: ")
            if inputt == "1":
                print("\tinstalling httpd")
                ansible1 = sp.getoutput("ansible {} -m package -a 'name=httpd state=present'".format(ansible))
                print(ansible1)
                ansible2 = sp.getoutput("ansible {} -m copy -a 'src=/var/www/html/web_page.html dest=/var/www/html/'".format(ansible))
                print(ansible2)

                ansible3 = sp.getoutput("ansible {} -m service -a 'name=httpd state=started'".format(ansible))
                print(ansible3)
            elif inputt == "2":
                ansible4 = sp.getoutput("ansible {} -m command -a 'yum install docker-ce --nobest -y'".format(ansible))
                print(ansible4)
                ansible5 = sp.getoutput("ansible {} -m command -a 'systemctl start docker'".format(ansible))
                ansible6 = sp.getoutput("ansible {} -m command -a 'docker ps -a'".format(ansible))
                print(ansible6)
            elif inputt == "3":
                cmd = input("\tEnter the command you would like to run: ")
                ansible7 = sp.getoutput("ansible {} -m command -a '{}'".format(ansible,cmd))
                print(ansible7)
            res = input("\tWould you like to continue?[Y/N]")
        os.system("sleep 10")


    elif inp == 5:
        print("INSTALLING DOCKER")
        op = sp.getoutput("yum install docker-ce --nobest -y")
        start = sp.getoutput("systemctl start docker")
        print("STARTED DOCKER SERVICES")
        print("CONFIGRATION OF DOCKER IS DONE!!!")
        ch = 'Y'
        cnt = 0
        while ch =='Y':
            if cnt == 0:
                ans = input("would you like to play with containers?[Y/N]")
            if ans == 'Y':
                print("CHOOSE OPERATION: ")
                print(" 1 : RUN ")
                print(" 2 : STOP")
                print(" 3 : REMOVE CONTAINER")
                print(" 4 : REMOVE IMAGE")
                print(" 5 : PULL IMAGE")
                opt = int(input())
                if opt == 1:
                    name = input("GIVE NAME TO YOUR CONTIANER: ")
                term = input("WOULD YOU LIKE TO GET INTERACTIVE TERMINAL OR CLOSE CONT AFTER RUNNING?[Y/N]")
                    image = input("IMAGE NAME : ")
                    cont_run = sp.getoutput("docker run -dit --name {} {}".format(name, image))
                    print(cont_run)
                    op_of_cont = sp.getoutput("docker ps")
                    print(op_of_cont)
                elif opt == 2:
                    all_cont = sp.getoutput("docker ps")
                    print("LIST OF CONTAINERS RUNNING")
                    print(all_cont)
                    cont_name = input("ENTER THE NAME OF CONTAINER TO BE STOPPED: ")
                    cont_stop = sp.getoutput("docker stop {}".format(cont_name))
                    print(cont_stop)
                    clear = os.system("clear")
                    check_stop_cont = sp.getoutput("docker ps")
                    print(check_stop_cont)
                elif opt == 3:
                    all_cont = sp.getoutput("docker ps -a")
                    print(all_cont)
                    rm_cont_name = input("IF ALL WANT TO REMOVE TYPE all or ENTER THE NAME OF CONTAINER TO BE REMOVED: ")
                    if rm_cont_name == "all":
                        rm_cont = sp.getoutput("docker rm `docker ps -a`")
                    else:
                        rm_cont = sp.getoutput("docker rm {}".format(rm_cont_name))
                    print(rm_cont)
                    check_rm_cont = sp.getoutput("docker ps -a")
                    print(check_rm_cont)
                elif opt == 4:
                    all_img = sp.getoutput("docker images")
                    print(all_img)
                    rm_img_name = input("IF ALL WANT TO REMOVE TYPE all OR ENTER NAME OF IMAGE TO BE DELETED: ")
                    if rm_img_name == "all":
                        rm_img = sp.getoutput("docker rmi `docker images -q` --force")
                    else:
                        rm_img = sp.getoutput("docker rmi {}".format(rm_img_name))
                    print(rm_img)
                    check_rm_img = sp.getoutput("docker images")
                    print(check_rm_img)
                elif opt == 5:
                    all_img_present = sp.getoutput("docker images")
                    print("LIST OF ALL CONTAINERS PRESENT")
                    print(all_img_present)
                    pull_img_name = input("ENTER NAME OF IMAGE TO BE PULLED: ")
                    pull_img = sp.getoutput("docker pull {}".format(pull_img_name))
                    print(pull_img)
                    check_pull_img = sp.getoutput("docker images")
                    print(check_pull_img)
                else:
                    print("ENTER CORRECT CHOICE")
                ch = input("WOULD YOU LIKE TO CONTINUE?[Y/N]: ")
                if ch != 'Y':
                    break
                cnt+=1
            else:
                break
    os.system("clear")
    response = input("WOULD YOU LIKE TO CONTINUE?[Y/N]")
                                                
